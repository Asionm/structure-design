import numpy as np
from scipy.optimize import curve_fit
from scipy.interpolate import interp1d
from scipy.interpolate import interp2d

# 混凝土弹模
elastic_modulus_concrete = {
    'C15': 2.20*1e4,
    'C20': 2.55*1e4,
    'C25': 2.80*1e4,
    'C30': 3.00*1e4,
    'C35': 3.15*1e4,
    'C40': 3.25*1e4,
    'C45': 3.35*1e4,
    'C50': 3.45*1e4,
    'C55': 3.55*1e4,
    'C60': 3.60*1e4,
    'C65': 3.65*1e4,
    'C70': 3.70*1e4,
    'C75': 3.75*1e4,
    'C80': 3.80*1e4
}

# 钢筋弹模
elastic_modulus_steel = {
    'HPB300': 2.10*1e5,
    'HRB335': 2.00*1e5,
    'HRB400': 2.00*1e5,
    'HRB500': 2.00*1e5,
    'HRBF335': 2.00*1e5,
    'HRBF400': 2.00*1e5,
    'HRBF500': 2.00*1e5,
    'RRB400': 2.00*1e5,
    '预应力螺纹钢筋': 2.00*1e5,
    '中强度预应力钢丝': 2.00*1e5,
    '消除应力钢丝': 2.05*1e5,
    '钢铰线': 1.95*1e5
}

# 混凝土轴心抗压强度设计值 单位N/mm2
concrete_compressive_design_strength = {
    'C15': 7.2,
    'C20': 9.6,
    'C25': 11.9,
    'C30': 14.3,
    'C35': 16.7,
    'C40': 19.1,
    'C45': 21.1,
    'C50': 23.1,
    'C55': 25.3,
    'C60': 27.5,
    'C65': 29.7,
    'C70': 31.8,
    'C75': 33.8,
    'C80': 35.9
}
# 混凝土轴心抗拉强度设计值
concrete_tensile_design_strength = {
    'C15': 0.91,
    'C20': 1.10,
    'C25': 1.27,
    'C30': 1.43,
    'C35': 1.57,
    'C40': 1.71,
    'C45': 1.80,
    'C50': 1.89,
    'C55': 1.96,
    'C60': 2.04,
    'C65': 2.09,
    'C70': 2.14,
    'C75': 2.18,
    'C80': 2.22
}

# 钢筋抗拉强度设计值 单位 N/mm2
steel_tensile_design_strength = {
    'HPB300': 270,
    'HRB335': 300,
    'HRBF335': 300,
    'HRB400': 360,
    'HRBF400': 360,
    'RRB400': 360,
    'HRB500': 435,
    'HRBF500': 435
}


# vx插值 规范表5.7.2
vx_x_data = np.array([2.4, 2.6, 2.8, 3.0, 3.5, 4.0])
vx_y_data = np.array([1.095, 1.079, 1.055, 1.028, 0.97, 0.94])
# 创建插值函数
f_vx = interp1d(vx_x_data, vx_y_data, kind='linear')
# # 定义拟合函数（这里使用线性函数）
# def linear_fit(x, m, c):
#     return m * x + c
# # 执行拟合
# vx_params, vx_covariance = curve_fit(linear_fit, vx_x_data, vx_y_data)
# # 获取拟合参数
# vx_m, vx_c = vx_params
# print(vx_m, ' ', vx_c)
# vx值拟合结果为
# vx_m = -0.10192200494363501
# vx_c = 1.3386954484114197


# eta_r值拟合 规范表5.7.3-1
eta_r_x_data = np.array([2.4, 2.6, 2.8, 3.0, 3.5, 4.0])
eta_r_y_data = np.array([2.58, 2.34, 2.20, 2.13, 2.07, 2.05])
# 创建插值函数
f_eta_r = interp1d(eta_r_x_data, eta_r_y_data, kind='linear')
# # 定义拟合函数（这里使用线性函数）
# def linear_fit(x, m, c):
#     return m * x + c
# # 执行拟合
# eta_r_params, vx_covariance = curve_fit(linear_fit, eta_r_x_data, eta_r_y_data)
# # 获取拟合参数
# eta_r_m, eta_r_c = eta_r_params
# print(eta_r_m, ' ', eta_r_c)
# eta_r值拟合结果为
# eta_r_m = -0.2827298098336945
# eta_r_c = 3.0906592533261015


# 矩形面积均布荷载作用下，通过中心点竖线上的平均附加应力系数a
# z/b
a_x = np.linspace(0, 5, 26)
# a/b
a_y = np.array([1,1.2,1.4,1.6,1.8,2,2.4,2.8,3.2,3.6,4.0,5.0,10.0])
# data
a_z = np.array([np.ones(13),
                [0.987,0.990,0.991,0.992,0.992,0.992,0.993,0.993,0.993,0.993,0.993,0.993,0.993],
                [0.936,0.947,0.953,0.956,0.958,0.960,0.961,0.962,0.962,0.963,0.963,0.963,0.963],
                [0.858,0.878,0.890,0.898,0.903,0.906,0.910,0.912,0.913,0.914,0.914,0.915,0.915],
                [0.775,0.801,0.810,0.831,0.839,0.844,0.851,0.855,0.857,0.858,0.859,0.860,0.860],
                [0.698,0.738,0.749,0.764,0.775,0.783,0.792,0.798,0.801,0.803,0.804,0.806,0.807],
                [0.631,0.663,0.686,0.703,0.715,0.725,0.737,0.744,0.749,0.752,0.754,0.756,0.758],
                [0.573,0.605,0.629,0.648,0.661,0.672,0.687,0.696,0.701,0.705,0.708,0.711,0.714],
                [0.524,0.556,0.580,0.599,0.613,0.625,0.641,0.651,0.658,0.663,0.666,0.670,0.675],
                [0.482,0.513,0.537,0.556,0.571,0.583,0.600,0.611,0.619,0.624,0.629,0.633,0.638],
                [0.446,0.475,0.499,0.518,0.533,0.545,0.563,0.575,0.584,0.590,0.594,0.600,0.606],
                [0.414,0.443,0.466,0.484,0.499,0.511,0.530,0.543,0.552,0.558,0.563,0.570,0.577],
                [0.387,0.414,0.436,0.454,0.469,0.481,0.500,0.513,0.523,0.530,0.535,0.543,0.551],
                [0.362,0.389,0.410,0.428,0.442,0.455,0.473,0.487,0.496,0.504,0.509,0.518,0.528],
                [0.341,0.366,0.387,0.404,0.418,0.430,0.449,0.463,0.472,0.480,0.486,0.495,0.506],
                [0.322,0.346,0.366,0.383,0.397,0.409,0.427,0.441,0.451,0.459,0.465,0.474,0.487],
                [0.305,0.328,0.348,0.364,0.377,0.389,0.407,0.420,0.431,0.439,0.445,0.455,0.468],
                [0.289,0.312,0.331,0.346,0.359,0.371,0.388,0.402,0.412,0.420,0.427,0.437,0.452],
                [0.276,0.297,0.315,0.330,0.343,0.353,0.372,0.385,0.395,0.403,0.410,0.421,0.436],
                [0.263,0.284,0.301,0.316,0.328,0.339,0.356,0.369,0.379,0.388,0.394,0.405,0.422],
                [0.251,0.271,0.288,0.302,0.314,0.325,0.342,0.355,0.365,0.373,0.379,0.391,0.408],
                [0.241,0.260,0.276,0.290,0.300,0.312,0.328,0.341,0.352,0.359,0.366,0.377,0.396],
                [0.231,0.250,0.265,0.278,0.290,0.300,0.316,0.329,0.339,0.347,0.353,0.365,0.384],
                [0.222,0.240,0.255,0.268,0.279,0.289,0.305,0.317,0.327,0.335,0.341,0.353,0.373],
                [0.214,0.231,0.245,0.258,0.269,0.279,0.294,0.300,0.316,0.324,0.330,0.342,0.362],
                [0.206,0.223,0.237,0.249,0.260,0.269,0.284,0.296,0.306,0.313,0.320,0.332,0.352]]).T
# 创建二维线性插值函数
f_a = interp2d(a_x, a_y, a_z, kind='linear')


def get_psai_p(_Es):
    if _Es < 15:
        return 0.5
    elif _Es < 30:
        return 0.4
    else:
        return 0.3


# 截面高度影响系数
# 当h≤800mm时，取h=1.0，当h≥2000mm时，取h=0.9，其间按线性内插法。
def get_beta_hp(h):
    if h<=800:
        return 1
    elif h>=2000:
        return 0.9
    else:
        return 1 - (h-800)/(2000-800)*0.1



